
Control_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000013e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000013e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000632  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005b4  00000000  00000000  00000816  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000242  00000000  00000000  00000dca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  0000100c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f4  00000000  00000000  00001070  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000004f  00000000  00000000  00001364  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000013b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__vector_13>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 42 00 	call	0x84	; 0x84 <main>
  74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <sent_data>:
void sent_data(unsigned char chr)
{
	//while (bit_is_clear(UCSRA, UDRE));
	//UDR = chr;
	
	while (bit_is_clear(UCSRA,UDRE)) {}; //cho den khi bit UDRE=1
  7c:	5d 9b       	sbis	0x0b, 5	; 11
  7e:	fe cf       	rjmp	.-4      	; 0x7c <sent_data>
	UDR=chr;
  80:	8c b9       	out	0x0c, r24	; 12
  82:	08 95       	ret

00000084 <main>:
volatile unsigned char u_Data;

int main(void)
{
    //set khung truyen 57600
	UBRRH = 0;
  84:	10 bc       	out	0x20, r1	; 32
	UBRRL =8;
  86:	88 e0       	ldi	r24, 0x08	; 8
  88:	89 b9       	out	0x09, r24	; 9
	//set cong xuat B
	DDRB = 0xFF;
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	87 bb       	out	0x17, r24	; 23
	
	//SET THANH GHI
	UCSRA = 0x00;
  8e:	1b b8       	out	0x0b, r1	; 11
	UCSRC = (1<<URSEL)|(1<<UCSZ1) | (1<<UCSZ0);
  90:	86 e8       	ldi	r24, 0x86	; 134
  92:	80 bd       	out	0x20, r24	; 32
	UCSRB = (1<<RXCIE)|(1<<RXEN) |(1<<TXEN);
  94:	88 e9       	ldi	r24, 0x98	; 152
  96:	8a b9       	out	0x0a, r24	; 10
	sei();
  98:	78 94       	sei
	
    while (1)
	{
		sent_data(PINB);
  9a:	86 b3       	in	r24, 0x16	; 22
  9c:	0e 94 3e 00 	call	0x7c	; 0x7c <sent_data>
  a0:	fc cf       	rjmp	.-8      	; 0x9a <main+0x16>

000000a2 <__vector_13>:
	}
}

ISR(USART_RXC_vect){
  a2:	1f 92       	push	r1
  a4:	0f 92       	push	r0
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	0f 92       	push	r0
  aa:	11 24       	eor	r1, r1
  ac:	8f 93       	push	r24
	u_Data = UDR;
  ae:	8c b1       	in	r24, 0x0c	; 12
  b0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	led_control(u_Data);
  b4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
#include <avr/interrupt.h>

//chuong trinh chon truyen du lieu
void led_control(unsigned char chr)
{
	PORTB = chr;
  b8:	88 bb       	out	0x18, r24	; 24
}

ISR(USART_RXC_vect){
	u_Data = UDR;
	led_control(u_Data);
}
  ba:	8f 91       	pop	r24
  bc:	0f 90       	pop	r0
  be:	0f be       	out	0x3f, r0	; 63
  c0:	0f 90       	pop	r0
  c2:	1f 90       	pop	r1
  c4:	18 95       	reti

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>
